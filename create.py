#=========================================================================
# This script creates LISA DWD galaxies across 15 metallicity bins,
# incorporating the metallicity-dependent binary fraction as
# discussed in Thiele et al. (2021). It is the ongoing,
# unstable version. Older versions can be found at (insert link).
#
# Author: Sarah Thiele
# Last updated: Oct 2nd, 2021
# Last changes to create.py: take out ZTF/Tyson files, add in option to not write-out to 
# interfiles. New functions module (funcs_v1)
#=========================================================================

import numpy as np
from astropy import constants as const
from astropy import units as u
import astropy.coordinates as coords
from astropy.time import Time
import argparse
from funcs_v1 import make_galaxy, getfiles


# Set constants:
# LEGWORK uses astropy units so we do also for consistency
G = const.G.value
c = const.c.value  # speed of light in m s^-1
M_sol = const.M_sun.value  # sun's mass in kg
R_sol = const.R_sun.value  # sun's radius in metres
sec_Myr = u.Myr.to('s')  # seconds in a million years
m_kpc = u.kpc.to('m')  # metres in a kiloparsec
L_sol = const.L_sun.value  # solar luminosity in Watts
Z_sun = 0.02  # solar metallicity
sun = coords.get_sun(Time("2021-04-23T00:00:00", scale='utc'))
sun_g = sun.transform_to(coords.Galactocentric)
sun_yGx = sun_g.galcen_distance.to('kpc').value
sun_zGx = sun_g.z.to('kpc').value
M_astro = 7070  # FIRE star particle mass in solar masses
mag_lim = 23  # chosen bolometric magnitude limit


parser = argparse.ArgumentParser()
parser.add_argument('--DWD', default='He_He', type=str)
parser.add_argument('--interfile', default='False', type=str)
parser.add_argument('--path', default='./')
parser.add_argument('--FIRE_path', default='./')
args = parser.parse_args()

# Generate array of metallicities:
met_arr = np.logspace(np.log10(1e-4), np.log10(0.03), 15)
met_arr = np.round(met_arr, 8)
met_arr = np.append(0.0, met_arr)

# Corresponding binaryy fractions and single-to-binaries mass ratios:
# (These can be generated by get_binfrac_of_Z(Z) and get_ratios(binfracs)
# functions)
binfracs = np.array([0.4847, 0.4732, 0.4618, 0.4503, 0.4388, 
                     0.4274, 0.4159, 0.4044, 0.3776, 0.3426, 
                     0.3076, 0.2726, 0.2376, 0.2027, 0.1677])

ratios = np.array([0.68, 0.71, 0.74, 0.78, 0.82, 
                   0.86, 0.9, 0.94, 1.05, 1.22, 
                   1.44, 1.7, 2.05, 2.51, 3.17])

ratio_05 = 0.64

# Run Code:
if args.DWD == 'He_He':
    kstar1 = '10'
    kstar2 = '10'    
elif args.DWD == 'CO_He':
    kstar1 = '11'
    kstar2 = '10'
elif args.DWD == 'CO_CO':
    kstar1 = '11'
    kstar2 = '11'
elif args.DWD == 'ONe':
    kstar1 = '12'
    kstar2 = '10_12'

fnames, label = getfiles(kstar1=kstar1, kstar2=kstar2)
# Run through all metallicities for metallicity-dependent
# binary fraction and binary fraction of 0.5
i = 0
for f, ratio, binfrac in zip(fnames, ratios, binfracs):
    make_galaxy(args.path, f, i, label, ratio, binfrac, args.interfile, args.FIRE_path)
    make_galaxy(args.path, f, i, label, ratio_05, 0.5, args.interfile, args.FIRE_path)
    i += 1
